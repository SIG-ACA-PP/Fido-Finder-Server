-- Asegúrate de tener la extensión pgcrypto habilitada si usas gen_random_uuid()
-- CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Crear la extensión PostGIS
CREATE EXTENSION IF NOT EXISTS postgis;

CREATE TABLE "colors" (
  "id" serial PRIMARY KEY,
  "color" varchar NOT NULL
);

CREATE TABLE "breed_types" (
  "id" serial PRIMARY KEY,
  "type" varchar NOT NULL
);

CREATE TABLE "breeds" (
  "id" serial PRIMARY KEY,
  "type" int REFERENCES "breed_types" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
  "breed" varchar NOT NULL
);

CREATE TABLE "users" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "names" varchar NOT NULL,
  "last_names" varchar NOT NULL,
  "phone_number" varchar NOT NULL,
  "email" varchar NOT NULL UNIQUE,
  "dob" timestamp,
  "residence" geometry(Point,4326),
  "current_location" geometry(Point,4326)
);

CREATE TABLE "pets" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "owner_id" uuid REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  "name" varchar NOT NULL,
  "color_id" int REFERENCES "colors" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
  "breed_id" int REFERENCES "breeds" ("id") ON DELETE RESTRICT ON UPDATE CASCADE,
  "description" varchar
);

CREATE TABLE "posts" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "pet_id" uuid REFERENCES "pets" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  "author_id" uuid REFERENCES "users" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  "is_lost" bool,
  "lost_in" geometry(Point,4326),
  "lost_datetime" timestamp,
  "found_in" geometry(Point,4326),
  "details" text
);

CREATE TABLE "places_seen_in" (
  "id" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  "post_id" uuid REFERENCES "posts" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
  "date_seen" timestamp,
  "geom" geometry(Point,4326)
);

CREATE TABLE "communities" (
  "id" serial PRIMARY KEY,
  "name" varchar NOT NULL,
  "geom" geometry(MultiPolygon,32616) -- TODO: definir sistema de referecia
);

-- CREATE TABLE "departments" (
--   "id" serial PRIMARY KEY,
--   "name" varchar NOT NULL,
--   "geom" geometry
-- );

CREATE TABLE public.departamentos (
  id integer NOT NULL,
  geom public.geometry(MultiPolygon,4326),
  fid bigint,
  nom_dpto character varying(254),
  cod_dpto character varying(254),
  shape_leng double precision,
  shape_area double precision
);

-- CREATE TABLE "municipalities" (
--   "id" serial PRIMARY KEY,
--   "dept_id" int REFERENCES "departments" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
--   "name" varchar NOT NULL,
--   "geom" geometry
-- );

CREATE TABLE public.municipios (
  id integer NOT NULL,
  geom public.geometry(MultiPolygon,4326),
  fid bigint,
  nom_dpto character varying(254),
  cod_dpto character varying(254),
  nom_mun character varying(254),
  cod_mun character varying(254),
  cod_mun4 character varying(254),
  tasa_pobr double precision,
  pobr_fisdl character varying(20),
  perim_km double precision,
  area_km2 double precision,
  pob_total integer,
  pob_homb integer,
  pob_mujer integer,
  shape_leng double precision,
  shape_area double precision
);

ALTER TABLE ONLY public.departamentos
    ADD CONSTRAINT departamentos_pkey PRIMARY KEY (id);

ALTER TABLE ONLY public.municipios
    ADD CONSTRAINT municipios_pkey PRIMARY KEY (id);

CREATE INDEX sidx_user_residence_geom ON public.users USING gist (residence);
CREATE INDEX sidx_user_current_location_geom ON public.users USING gist (current_location);

CREATE INDEX sidx_post_lost_in_geom ON public.posts USING gist (lost_in);
CREATE INDEX sidx_post_found_in_geom ON public.posts USING gist (found_in);

CREATE INDEX sidx_places_seen_in_geom ON public.places_seen_in USING gist (geom);

CREATE INDEX sidx_communities_geom ON public.communities USING gist (geom);

CREATE INDEX sidx_departamentos_geom ON public.departamentos USING gist (geom);

CREATE INDEX sidx_municipios_geom ON public.municipios USING gist (geom);

COMMENT ON COLUMN "breed_types"."type" IS 'Animal type breed. Like, dogs or cats';
COMMENT ON COLUMN "users"."residence" IS 'Current residence location. Should be a point';
COMMENT ON COLUMN "users"."current_location" IS 'Current location. Should be a point and will be generated by the app';
COMMENT ON COLUMN "posts"."is_lost" IS 'If the pet hasnt been found yet.';
COMMENT ON COLUMN "posts"."lost_in" IS 'Initial place where pet was lost. Should be a point';
COMMENT ON COLUMN "posts"."found_in" IS 'Place where the pet was found';
COMMENT ON COLUMN "posts"."details" IS 'Details of the post if user wants to';
COMMENT ON COLUMN "places_seen_in"."geom" IS 'Initial place where pet was lost. Should be a point';
COMMENT ON COLUMN "communities"."geom" IS 'Should be a polygon';
